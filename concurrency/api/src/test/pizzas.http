######### NORMAL OPERATION  ###########

### Read all pizzas
GET http://localhost:3000/pizzas

### Read all pizzas with File variable
@baseUrl = http://localhost:3000
GET {{baseUrl}}/pizzas

### Read all pizzas sorted by title (ascending)
GET {{baseUrl}}/pizzas/?order=+title

### Read all pizzas sorted by title (descending)
GET {{baseUrl}}/pizzas/?order=-title

### Read pizza identified by 2
GET {{baseUrl}}/pizzas/3

### Create a pizza by using the admin account
#### First login as the admin
POST {{baseUrl}}/auths/login
Content-Type: application/json

{
  "username":"admin",
  "password":"admin"
}

> {% client.global.set("adminToken", response.body.token) %}

#### Create a pizza with the admin token and an image
#### Create a pizza with the admin token
POST {{baseUrl}}/pizzas
Content-Type: multipart/form-data; boundary=boundary
Authorization: {{adminToken}}

--boundary
Content-Disposition: form-data; name="newPizza"
Content-Type: application/json

{
  "title":"Magic Green",
  "content":"Epinards, Brocolis, Olives vertes, Basilic"
}
--boundary
Content-Disposition: form-data; name="image"; filename="pizza.png"
Content-Type: image/png

// The 'pizza.png' file will be uploaded
< ./pizza.png

--boundary


#### Create a pizza with the admin token
POST {{baseUrl}}/pizzas
Content-Type: application/json
Authorization: {{adminToken}}

{
  "title":"Magic Green",
  "content":"Epinards, Brocolis, Olives vertes, Basilic"
}

### Delete pizza identified by 2 with the admin token
DELETE {{baseUrl}}/pizzas/22
Authorization: {{adminToken}}

### Update the pizza identified by 6 with the admin token
PATCH {{baseUrl}}/pizzas/3
Content-Type: application/json
Authorization: {{adminToken}}

{
  "title":"Magic Green 3"
}




######### ERROR OPERATION  ###########

### Read the pizza error
GET {{baseUrl}}/pizzas/error

### Read pizza which does not exists
GET {{baseUrl}}/pizzas/100

### 1. Create a pizza without a token
POST {{baseUrl}}/pizzas
Content-Type: application/json

{
  "title":"Magic Green",
  "content":"Epinards, Brocolis, Olives vertes, Basilic"
}

### 2. Create a pizza without being the admin, use manager account
#### 2.1 First login as the manager
POST {{baseUrl}}/auths/login
Content-Type: application/json

{
  "username":"manager",
  "password":"manager"
}

> {% client.global.set("managerToken", response.body.token) %}

#### 2.2 Try to create a pizza with the manager token
POST {{baseUrl}}/pizzas
Content-Type: application/json
Authorization: {{managerToken}}

{
  "title":"Magic Green",
  "content":"Epinards, Brocolis, Olives vertes, Basilic"
}

### Create a pizza which lacks a property
POST {{baseUrl}}/pizzas
Content-Type: application/json
Authorization: {{adminToken}}

{
  "content":"Epinards, Brocolis, Olives vertes, Basilic"
}

### Create a pizza without info for a property
POST {{baseUrl}}/pizzas
Content-Type: application/json
Authorization: {{adminToken}}

{
  "title":"",
  "content":"Epinards, Brocolis, Olives vertes, Basilic"
}

### Update for a pizza which does not exist
PATCH {{baseUrl}}/pizzas/200
Content-Type: application/json
Authorization: {{adminToken}}

{
  "title":"Magic Green 2"
}

### Update for a pizza which does not provide any info for a property
PATCH {{baseUrl}}/pizzas/1
Content-Type: application/json
Authorization: {{adminToken}}

{
  "title":"Magic Green 2",
  "content":""
}


### Create the guest user
POST {{baseUrl}}/auths/register
Content-Type: application/json

{
  "username":"guest",
  "password":"guest"
}

### Login the guest user
POST {{baseUrl}}/auths/login
Content-Type: application/json

{
  "username":"guest",
  "password":"guest"
}

> {% client.global.set("guestToken", response.body.token) %}

### Delete pizza identified by 2 with guest
DELETE {{baseUrl}}/pizzas/2
Authorization: {{guestToken}}

### Try to delete pizza identified by 2 anonymously
DELETE {{baseUrl}}/pizzas/2
